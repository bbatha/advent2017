fn digits(input: &str) -> Result<Vec<u64>, String> {
    input.bytes().map(|b| {
        if b < b'0' || b > b'9' {
            Err(String::from("Digit is not an ascii number"))
        } else {
            Ok((b - b'0') as u64)
        }
    }).collect()
}

fn inverse_captcha(input: &str) -> Result<u64, String> {
    if input.len() < 1 {
        return Err("Cannot captcha an empty string".into());
    }

    let digits = digits(input)?;
    let mut total = 0;
    let mut digit_iter = digits.iter().peekable();
    while let Some(&digit) = digit_iter.next() {
        let next = if let Some(&&next) = digit_iter.peek() {
            next
        } else {
            digits[0]
        };

        if next == digit {
            total += digit;
        }
    }

    return Ok(total);
}

#[test]
fn test_inverse_captcha() {
    assert_eq!(3, inverse_captcha("1122").unwrap());
    assert_eq!(4, inverse_captcha("1111").unwrap());
    assert_eq!(0, inverse_captcha("1234").unwrap());
    assert_eq!(9, inverse_captcha("91212129").unwrap());
}

fn inverse_captcha_half(input: &str) -> Result<u64, String> {
    if input.len() < 1 {
        return Err("Cannot captcha an empty string".into());
    }

    if input.len() % 2 != 0 {
        return Err("Cannot captcha an odd length string".into());
    }

    let digits = digits(input)?;

    let mut total = 0;
    let factor = digits.len() / 2;
    for (i, &digit) in digits.iter().enumerate() {
        let next = {
            let mut next_idx = i + factor;
            if next_idx >= digits.len() {
                next_idx -= digits.len();
            }

            digits[next_idx]
        };

        if next == digit {
            total += digit;
        }
    }

    return Ok(total);
}

#[test]
fn test_inverse_captcha_half() {
    assert_eq!(6, inverse_captcha_half("1212").unwrap());
    assert_eq!(0, inverse_captcha_half("1221").unwrap());
    assert_eq!(4, inverse_captcha_half("123425").unwrap());
    assert_eq!(12, inverse_captcha_half("123123").unwrap());
    assert_eq!(4, inverse_captcha_half("12131415").unwrap());
}

fn main() {
    let input = "5672987533353956199629683941564528646262567117433461547747793928322958646779832484689174151918261551689221756165598898428736782194511627829355718493723961323272136452517987471351381881946883528248611611258656199812998632682668749683588515362946994415852337196718476219162124978836537348924591957188827929753417884942133844664636969742547717228255739959316351852731598292529837885992781815131876183578461135791315287135243541659853734343376618419952776165544829717676988897684141328138348382882699672957866146524759879236555935723655326743713542931693477824289283542468639522271643257212833248165391957686226311246517978319253977276663825479144321155712866946255992634876158822855382331452649953283788863248192338245943966269197421474555779135168637263279579842885347152287275679811576594376535226167894981226866222987522415785244875882556414956724976341627123557214837873872723618395529735349273241686548287549763993653379539445435319698825465289817663294436458194867278623978745981799283789237555242728291337538498616929817268211698649236646127899982839523784837752863458819965485149812959121884771849954723259365778151788719941888128618552455879369919511319735525621198185634342538848462461833332917986297445388515717463168515123732455576143447454835849565757773325367469763383757677938748319968971312267871619951657267913817242485559771582167295794259441256284168356292785568858527184122231262465193612127961685513913835274823892596923786613299747347259254823531262185328274367529265868856512185135329652635938373266759964119863494798222245536758792389789818646655287856173534479551364115976811459677123592747375296313667253413698823655218254168196162883437389718167743871216373164865426458794239496224858971694877159591215772938396827435289734165853975267521291574436567193473814247981877735223376964125359992555885137816647382139596646856417424617847981855532914872251686719394341764324395254556782277426326331441981737557262581762412544849689472281645835957667217384334435391572985228286537574388834835693416821419655967456137395465649249256572866516984318344482684936625486311718525523265165";
    let res = inverse_captcha(input);
    println!("{}", res.unwrap());
    let res = inverse_captcha_half(input);
    println!("{}", res.unwrap());
}
